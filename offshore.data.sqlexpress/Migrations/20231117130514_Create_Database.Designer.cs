// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using offshore.data.models.settings.contexts;

#nullable disable

namespace offshore.data.models.settings.Migrations
{
    [DbContext(typeof(SettingsDataContext))]
    [Migration("20231117130514_Create_Database")]
    partial class Create_Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("config")
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContactLocation", b =>
                {
                    b.Property<long>("ContactsId")
                        .HasColumnType("bigint");

                    b.Property<long>("LocationsId")
                        .HasColumnType("bigint");

                    b.HasKey("ContactsId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("ContactLocation", "biz");
                });

            modelBuilder.Entity("LanguageUser", b =>
                {
                    b.Property<long>("LanguagesId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("LanguagesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("LanguageUser", "config");
                });

            modelBuilder.Entity("ModuleSinglePointMooring", b =>
                {
                    b.Property<long>("ModulesId")
                        .HasColumnType("bigint");

                    b.Property<long>("SinglePointMooringsId")
                        .HasColumnType("bigint");

                    b.HasKey("ModulesId", "SinglePointMooringsId");

                    b.HasIndex("SinglePointMooringsId");

                    b.ToTable("ModuleSinglePointMooring", "config");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<long>("RolesId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser", "users");
                });

            modelBuilder.Entity("SiteUser", b =>
                {
                    b.Property<long>("SitesId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("SitesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("SiteUser", "config");
                });

            modelBuilder.Entity("TelephoneNumberUser", b =>
                {
                    b.Property<long>("TelephoneNumbersId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("TelephoneNumbersId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TelephoneNumberUser", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses", "biz");
                });

            modelBuilder.Entity("offshore.data.models.settings.Alarm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AlarmBit")
                        .HasColumnType("bit");

                    b.Property<long>("DisplayColour")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("MeasurementUnitId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RaiseSound")
                        .HasColumnType("bit");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("SendSms")
                        .HasColumnType("bit");

                    b.Property<long>("SensorId")
                        .HasColumnType("bigint");

                    b.Property<double>("Threshold")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("SensorId");

                    b.ToTable("Alarms", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.Calibration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CalibratedById")
                        .HasColumnType("bigint");

                    b.Property<double>("Data")
                        .HasColumnType("float");

                    b.Property<long>("DataPosition")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("Raw")
                        .HasColumnType("bigint");

                    b.Property<long?>("SiteId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<long>("Zero")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Calibrations", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.ChangeLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("SiteId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("ChangeLogs", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Companies", "biz");
                });

            modelBuilder.Entity("offshore.data.models.settings.Consignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BowOffset")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("HeadOffset")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<long?>("SpmId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TankerBeam")
                        .HasColumnType("bigint");

                    b.Property<string>("TankerImo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TankerLength")
                        .HasColumnType("bigint");

                    b.Property<string>("TankerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SpmId");

                    b.ToTable("Consignments", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TelephoneNumberId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TelephoneNumberId");

                    b.ToTable("Contacts", "biz");
                });

            modelBuilder.Entity("offshore.data.models.settings.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries", "biz");
                });

            modelBuilder.Entity("offshore.data.models.settings.CountryCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("DialingCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DialingCode", "CountryId");

                    b.ToTable("CountryCodes", "biz");
                });

            modelBuilder.Entity("offshore.data.models.settings.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages", "lang");
                });

            modelBuilder.Entity("offshore.data.models.settings.LiveDatum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Processed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SpmId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TelemetryDataId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SpmId");

                    b.HasIndex("TelemetryDataId");

                    b.ToTable("LiveData", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Locations", "biz");
                });

            modelBuilder.Entity("offshore.data.models.settings.MeasurementType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("DefaultUnitId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("DefaultUnitId");

                    b.ToTable("MeasurementTypes", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.MeasurementUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Factor")
                        .HasColumnType("float");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementUnits", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("GraphMinimum")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Modules", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool?>("CanAssignSysAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("AssignSysAdmin");

                    b.Property<bool?>("CanCreateConsignment")
                        .HasColumnType("bit")
                        .HasColumnName("CreateConsignment");

                    b.Property<bool?>("CanCreateSite")
                        .HasColumnType("bit")
                        .HasColumnName("CreateSite");

                    b.Property<bool?>("CanCreateUser")
                        .HasColumnType("bit")
                        .HasColumnName("CreateUser");

                    b.Property<bool?>("CanDeleteConsignment")
                        .HasColumnType("bit")
                        .HasColumnName("DeleteConsignment");

                    b.Property<bool?>("CanDeleteSite")
                        .HasColumnType("bit")
                        .HasColumnName("DeleteSite");

                    b.Property<bool?>("CanDeleteUser")
                        .HasColumnType("bit")
                        .HasColumnName("DeleteUser");

                    b.Property<bool?>("CanEnableConsignment")
                        .HasColumnType("bit")
                        .HasColumnName("EnableConsignment");

                    b.Property<bool?>("CanEnableSite")
                        .HasColumnType("bit")
                        .HasColumnName("EnableSite");

                    b.Property<bool?>("CanEnableUser")
                        .HasColumnType("bit")
                        .HasColumnName("EnableUser");

                    b.Property<bool?>("CanUpdateConsignment")
                        .HasColumnType("bit")
                        .HasColumnName("UpdateConsignment");

                    b.Property<bool?>("CanUpdateSite")
                        .HasColumnType("bit")
                        .HasColumnName("UpdateSite");

                    b.Property<bool?>("CanUpdateUser")
                        .HasColumnType("bit")
                        .HasColumnName("UpdateUser");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Permissions", "users");
                });

            modelBuilder.Entity("offshore.data.models.settings.ReceivedData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessedData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SpmId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TelemetryDataId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SpmId");

                    b.HasIndex("TelemetryDataId");

                    b.ToTable("ReceivedData", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.Receiver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Receivers", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Type");

                    b.Property<long?>("PermissionSetId")
                        .HasColumnType("bigint");

                    b.Property<long>("Weight")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("PermissionSetId");

                    b.ToTable("Roles", "users");
                });

            modelBuilder.Entity("offshore.data.models.settings.Sensor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AlarmInterval")
                        .HasColumnType("bigint");

                    b.Property<long?>("CalibrationId")
                        .HasColumnType("bigint");

                    b.Property<string>("DataArrayPosition")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.Property<long>("DecimalPlaces")
                        .HasColumnType("bigint");

                    b.Property<long?>("DefaultMeasurementUnitId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double?>("MaximumValue")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<long?>("MeasurementId")
                        .HasColumnType("bigint");

                    b.Property<double>("MinimumValue")
                        .HasColumnType("float");

                    b.Property<long?>("ModuleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TelemetryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalibrationId");

                    b.HasIndex("DefaultMeasurementUnitId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("TelemetryId");

                    b.ToTable("Sensors", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.SinglePointMooring", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("AwacPosition")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("CompassAdjustment")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GpsBearingAdjustment")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("GpsDistanceAdjustment")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<double?>("GpsPlumLatitude")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double?>("GpsPlumLongitude")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int?>("GpsToUse")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long>("Index")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("SiteId")
                        .HasColumnType("bigint");

                    b.Property<int?>("WindAdjustment")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("SiteId");

                    b.ToTable("SinglePointMoorings", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.Site", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ConfigurationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConfigurationId");

                    b.HasIndex("LocationId");

                    b.ToTable("Sites", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.SiteConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AudibleAlarm")
                        .HasColumnType("bit");

                    b.Property<long>("BaudRate")
                        .HasColumnType("bigint");

                    b.Property<bool>("EmailAlarm")
                        .HasColumnType("bit");

                    b.Property<long?>("EmailUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LogData")
                        .HasColumnType("bigint");

                    b.Property<bool>("Modbus")
                        .HasColumnType("bit");

                    b.Property<bool>("Pilot")
                        .HasColumnType("bit");

                    b.Property<long>("PortNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceiverTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("SmsAlarm")
                        .HasColumnType("bit");

                    b.Property<long>("SmsInterval")
                        .HasColumnType("bigint");

                    b.Property<string>("SmsSender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SmsUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("SqlConnection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SyncUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("SynchronisationLicence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SyncLicence");

                    b.Property<string>("SynchronisationPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SyncPassword");

                    b.Property<long>("TcpPort")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeZone")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmailUserId");

                    b.HasIndex("ReceiverTypeId");

                    b.HasIndex("SmsUserId");

                    b.HasIndex("SyncUserId");

                    b.ToTable("SiteConfigurations", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.SiteMeasurementUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("MeasurementId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SiteId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UnitsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UnitsId");

                    b.ToTable("SiteMeasurementUnits", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.Telemetry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("SpmId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("SpmId");

                    b.ToTable("TelemetryData", "config");
                });

            modelBuilder.Entity("offshore.data.models.settings.TelephoneNumber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryCodeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Number")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryCodeId");

                    b.HasIndex("Number");

                    b.HasIndex("TypeId");

                    b.ToTable("TelephoneNumbers", "biz");
                });

            modelBuilder.Entity("offshore.data.models.settings.TelephoneType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TelephoneTypes", "biz");
                });

            modelBuilder.Entity("offshore.data.models.settings.Translatable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Translatables", "lang");
                });

            modelBuilder.Entity("offshore.data.models.settings.Translation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long>("TranslatableId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasAlternateKey("LanguageId", "TranslatableId");

                    b.HasIndex("TranslatableId");

                    b.ToTable("Translations", "lang");
                });

            modelBuilder.Entity("offshore.data.models.settings.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Users", "users");
                });

            modelBuilder.Entity("ContactLocation", b =>
                {
                    b.HasOne("offshore.data.models.settings.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offshore.data.models.settings.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguageUser", b =>
                {
                    b.HasOne("offshore.data.models.settings.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offshore.data.models.settings.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModuleSinglePointMooring", b =>
                {
                    b.HasOne("offshore.data.models.settings.Module", null)
                        .WithMany()
                        .HasForeignKey("ModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offshore.data.models.settings.SinglePointMooring", null)
                        .WithMany()
                        .HasForeignKey("SinglePointMooringsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("offshore.data.models.settings.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offshore.data.models.settings.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SiteUser", b =>
                {
                    b.HasOne("offshore.data.models.settings.Site", null)
                        .WithMany()
                        .HasForeignKey("SitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offshore.data.models.settings.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TelephoneNumberUser", b =>
                {
                    b.HasOne("offshore.data.models.settings.TelephoneNumber", null)
                        .WithMany()
                        .HasForeignKey("TelephoneNumbersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offshore.data.models.settings.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("offshore.data.models.settings.Address", b =>
                {
                    b.HasOne("offshore.data.models.settings.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("offshore.data.models.settings.Alarm", b =>
                {
                    b.HasOne("offshore.data.models.settings.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("offshore.data.models.settings.Sensor", "Sensor")
                        .WithMany("Alarms")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("offshore.data.models.settings.Calibration", b =>
                {
                    b.HasOne("offshore.data.models.settings.Site", "Site")
                        .WithMany("Calibrations")
                        .HasForeignKey("SiteId");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("offshore.data.models.settings.ChangeLog", b =>
                {
                    b.HasOne("offshore.data.models.settings.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId");

                    b.HasOne("offshore.data.models.settings.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");

                    b.Navigation("User");
                });

            modelBuilder.Entity("offshore.data.models.settings.Company", b =>
                {
                    b.HasOne("offshore.data.models.settings.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("offshore.data.models.settings.Consignment", b =>
                {
                    b.HasOne("offshore.data.models.settings.SinglePointMooring", "Spm")
                        .WithMany()
                        .HasForeignKey("SpmId");

                    b.Navigation("Spm");
                });

            modelBuilder.Entity("offshore.data.models.settings.Contact", b =>
                {
                    b.HasOne("offshore.data.models.settings.TelephoneNumber", "TelephoneNumber")
                        .WithMany()
                        .HasForeignKey("TelephoneNumberId");

                    b.Navigation("TelephoneNumber");
                });

            modelBuilder.Entity("offshore.data.models.settings.CountryCode", b =>
                {
                    b.HasOne("offshore.data.models.settings.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("offshore.data.models.settings.LiveDatum", b =>
                {
                    b.HasOne("offshore.data.models.settings.SinglePointMooring", "Spm")
                        .WithMany("LiveData")
                        .HasForeignKey("SpmId");

                    b.HasOne("offshore.data.models.settings.Telemetry", "TelemetryData")
                        .WithMany()
                        .HasForeignKey("TelemetryDataId");

                    b.Navigation("Spm");

                    b.Navigation("TelemetryData");
                });

            modelBuilder.Entity("offshore.data.models.settings.Location", b =>
                {
                    b.HasOne("offshore.data.models.settings.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("offshore.data.models.settings.MeasurementType", b =>
                {
                    b.HasOne("offshore.data.models.settings.MeasurementUnit", "DefaultUnit")
                        .WithMany()
                        .HasForeignKey("DefaultUnitId");

                    b.Navigation("DefaultUnit");
                });

            modelBuilder.Entity("offshore.data.models.settings.ReceivedData", b =>
                {
                    b.HasOne("offshore.data.models.settings.SinglePointMooring", "Spm")
                        .WithMany()
                        .HasForeignKey("SpmId");

                    b.HasOne("offshore.data.models.settings.Telemetry", "TelemetryData")
                        .WithMany()
                        .HasForeignKey("TelemetryDataId");

                    b.Navigation("Spm");

                    b.Navigation("TelemetryData");
                });

            modelBuilder.Entity("offshore.data.models.settings.Role", b =>
                {
                    b.HasOne("offshore.data.models.settings.Permission", "PermissionSet")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionSetId");

                    b.Navigation("PermissionSet");
                });

            modelBuilder.Entity("offshore.data.models.settings.Sensor", b =>
                {
                    b.HasOne("offshore.data.models.settings.Calibration", "Calibration")
                        .WithMany()
                        .HasForeignKey("CalibrationId");

                    b.HasOne("offshore.data.models.settings.MeasurementUnit", "DefaultMeasurementUnit")
                        .WithMany()
                        .HasForeignKey("DefaultMeasurementUnitId");

                    b.HasOne("offshore.data.models.settings.MeasurementType", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId");

                    b.HasOne("offshore.data.models.settings.Module", "Module")
                        .WithMany("Sensors")
                        .HasForeignKey("ModuleId");

                    b.HasOne("offshore.data.models.settings.Telemetry", "Telemetry")
                        .WithMany()
                        .HasForeignKey("TelemetryId");

                    b.Navigation("Calibration");

                    b.Navigation("DefaultMeasurementUnit");

                    b.Navigation("Measurement");

                    b.Navigation("Module");

                    b.Navigation("Telemetry");
                });

            modelBuilder.Entity("offshore.data.models.settings.SinglePointMooring", b =>
                {
                    b.HasOne("offshore.data.models.settings.Site", "Site")
                        .WithMany("SinglePointMoorings")
                        .HasForeignKey("SiteId");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("offshore.data.models.settings.Site", b =>
                {
                    b.HasOne("offshore.data.models.settings.Company", "Company")
                        .WithMany("Sites")
                        .HasForeignKey("CompanyId");

                    b.HasOne("offshore.data.models.settings.SiteConfiguration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId");

                    b.HasOne("offshore.data.models.settings.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Company");

                    b.Navigation("Configuration");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("offshore.data.models.settings.SiteConfiguration", b =>
                {
                    b.HasOne("offshore.data.models.settings.User", "EmailUser")
                        .WithMany()
                        .HasForeignKey("EmailUserId");

                    b.HasOne("offshore.data.models.settings.Receiver", "ReceiverType")
                        .WithMany()
                        .HasForeignKey("ReceiverTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offshore.data.models.settings.User", "SmsUser")
                        .WithMany()
                        .HasForeignKey("SmsUserId");

                    b.HasOne("offshore.data.models.settings.User", "SyncUser")
                        .WithMany()
                        .HasForeignKey("SyncUserId");

                    b.Navigation("EmailUser");

                    b.Navigation("ReceiverType");

                    b.Navigation("SmsUser");

                    b.Navigation("SyncUser");
                });

            modelBuilder.Entity("offshore.data.models.settings.SiteMeasurementUnit", b =>
                {
                    b.HasOne("offshore.data.models.settings.MeasurementType", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId");

                    b.HasOne("offshore.data.models.settings.Site", "Site")
                        .WithMany("SiteMeasurementUnits")
                        .HasForeignKey("SiteId");

                    b.HasOne("offshore.data.models.settings.MeasurementUnit", "Units")
                        .WithMany()
                        .HasForeignKey("UnitsId");

                    b.Navigation("Measurement");

                    b.Navigation("Site");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("offshore.data.models.settings.Telemetry", b =>
                {
                    b.HasOne("offshore.data.models.settings.SinglePointMooring", "Spm")
                        .WithMany()
                        .HasForeignKey("SpmId");

                    b.Navigation("Spm");
                });

            modelBuilder.Entity("offshore.data.models.settings.TelephoneNumber", b =>
                {
                    b.HasOne("offshore.data.models.settings.CountryCode", "CountryCode")
                        .WithMany("TelephoneNumbers")
                        .HasForeignKey("CountryCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offshore.data.models.settings.TelephoneType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryCode");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("offshore.data.models.settings.Translation", b =>
                {
                    b.HasOne("offshore.data.models.settings.Language", "Language")
                        .WithMany("Translations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("offshore.data.models.settings.Translatable", "Translatable")
                        .WithMany("Translations")
                        .HasForeignKey("TranslatableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Translatable");
                });

            modelBuilder.Entity("offshore.data.models.settings.Company", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("offshore.data.models.settings.CountryCode", b =>
                {
                    b.Navigation("TelephoneNumbers");
                });

            modelBuilder.Entity("offshore.data.models.settings.Language", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("offshore.data.models.settings.Module", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("offshore.data.models.settings.Permission", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("offshore.data.models.settings.Sensor", b =>
                {
                    b.Navigation("Alarms");
                });

            modelBuilder.Entity("offshore.data.models.settings.SinglePointMooring", b =>
                {
                    b.Navigation("LiveData");
                });

            modelBuilder.Entity("offshore.data.models.settings.Site", b =>
                {
                    b.Navigation("Calibrations");

                    b.Navigation("SinglePointMoorings");

                    b.Navigation("SiteMeasurementUnits");
                });

            modelBuilder.Entity("offshore.data.models.settings.Translatable", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
